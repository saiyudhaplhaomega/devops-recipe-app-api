name: Deploy
# trigger deploy workflow on pushing a change to main or prod branches
on:
  push:
    branches:
      - main
      - prod

jobs:
  # run liting to make sure there are no errors before deploying
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    name: Test and Lint
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    # here "needs" make sure test-lint job is successful before running deploy job
    needs: [test-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # different workspaces for main(we deploy to stage) and prod(we deploy to prod) branches
      - name: Set vars
        run: |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
          echo "staging" > .workspace
          fi
      - name: Push to ECR
      # vars
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # in ubuntu aws cmd is installed
      # login to aws ecr, build and push both app and proxy images
      # so the pipe allows us to pass the output of one command to another command
      # we are logging into aws version of docker hub
      # first we build the app image, tag as registry name, SHA hash generated for each commit
      # then push the image to ecr repos 
      # . runs the dockerfile in root directory 
      # proxy/ runs the dockerfile in proxy directory, so we build then push 
      # we are doing the same for the app and proxy images
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
          docker build --compress -t ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA
          docker build --compress -t ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA proxy/
          docker push ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA
