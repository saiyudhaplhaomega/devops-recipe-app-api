name: Test and Lint
# test and lint workflow, will be reused in checks and deploy workflows
# trigger workflow on call, we can use in other workflows
on:
  workflow_call:
    secrets:
      DOCKERHUB_USER:
        required: true
        description: "Username for DockerHub auth"
      DOCKERHUB_TOKEN:
        required: true
        description: "Token for DockerHub auth"

jobs:
  python:
    name: Python
    runs-on: ubuntu-22.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
        # both the secrets. are coming from the "on" block above. we pull \
        # them from the checks.yml workflow, from github projects
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        # runs unit test for the project
      - name: Test
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
        # just checks there are no linting errors in the code called flake8
      - name: Python flake8
        run: docker compose run --rm app sh -c "flake8"


  terraform:
    name: Terraform
    runs-on: ubuntu-22.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Terraform lint
      # commands describe below
      # first initialize terraform without backend, because we are not making changes in AWS(backend)
      # then validate the terraform code in both setup and deploy folders
      # fmt -check checks if the terraform code is formatted properly, it doesnt format here
        run: | #this pipe character allows to run multiple commands
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ validate
          docker compose run --rm terraform -chdir=setup/ fmt -check
          docker compose run --rm terraform -chdir=deploy/ validate
          docker compose run --rm terraform -chdir=deploy/ fmt -check
     